      SUBROUTINE MVSENDGRID.API(OBJ)
      **********************************************************************
      *
      * Copyright (C) 2018 Zumasys, Inc., All Rights Reserved
      *
      * Written by: Patrick Payne, Zumasys
      * Date: 4/2/2019
      * Description: SENDGRID wrapper

      **********************************************************************
      *
      * Purpose of this program is to front end the sendgrid library of functions
      *
      * It will utilize the object model concept and try to wrap all sendgrid
      * functions into this one library
      *
      * Items to do
      *
      * Add File option. (COMPLETED)
      * qc tests to validate fields sent (OUTSTANDING)
      * Config to get user name/password/etc (COMPLETED)
      * Return Message/Status (COMPLETED)
      * REMOVE ALL DEBUG STATEMENTS (COMPLETED)
      *
      * OBJ
      * { "api":"mailsend_v2",
      *    "params": {
      *       "to": [
      *         {
      *           "email":"email address",
      *           "name":"Nice name"
      *         }
      *       ],
      *       "cc": [
      *         {
      *           "email":"email address",
      *           "name":"Nice name"
      *         }
      *       ],
      *       "bcc": [
      *         {
      *           "email":"email address",
      *           "name":"Nice name"
      *         }
      *       ],
      *       "debug":"Y or N",
      *       "replyto":"address",
      *       "from":"From email address",
      *       "fromname":"From name",
      *       "subject":"Subject",
      *       "text":"Plain text of your email",
      *       "html":"Html version of your email",
      *       "files": [
      *           {
      *              "sourcefile":"path to file",
      *              "filename":"file name to present file as",
      *              "type":"type of file, application/pdf for example"
      *           }
      *       ]
      *    },
      *   "result": {
      *      "status":"error or ok",
      *      "statusmsg:"status msg"
      *    }
      *
      *  }
      *
      * Starting with mailsend_v2 - We are using this version because it allows
      * attachments without having to base64 and include them into the json payload
      * v2 uses curl and a normal form-data post to get attachments.
      *
      * curl https://api.sendgrid.com/api/mail.send.json \
      *-F to=recipient@domain.com -F toname=test -F subject="Example Subject" \
      *-F text="testing text body" --form-string html="<strong>testing html body</strong>" \
      *-F from=test@yourdomain.com -F api_user=your_sendgrid_username -F api_key=your_sendgrid_password \
      *-F files\[attachment.gz\]=@f.php.gz
      *
      *
      * This intial part will initialize a object for a user.
      *

      WOBJ="MVDBTOOLKIT.WOBJ"

      FIELD.TYPE=""

      INIT.FUNCTION=OCONV(OBJ<1,1,1>,"MCU")

      BEGIN CASE
         CASE INIT.FUNCTION="MAILSEND_V2"
            GOSUB mailsendv2.init
            RETURN
      END CASE

      CALL @WOBJ(OBJ,"GET","api",API,"",RERR)
      CALL @WOBJ(OBJ,"GET","debug",DO.DEBUG,"",RERR)
      IF OCONV(DO.DEBUG[1,1],"MCU") = "Y" OR DO.DEBUG="1" THEN DO.DEBUG=1 ELSE DO.DEBUG=0

      CALL @WOBJ(OBJ,"SET.OBJECT","result","{}","",RERR)

      API=OCONV(API,'MCU')

      APISTATUS="ok"
      APISTATUSMSG=""

      OPEN "DICT","MVSENDGRID.BP" TO DICT.MVSENDGRID.BP ELSE
         APISTATUS="error"
         APISTATUSMSG="Could not open DICT MVSENDGRID.BP"
         GOTO end.of.routine
      END

      READ CONFIG FROM DICT.MVSENDGRID.BP, "CONFIG.JSON" ELSE
         APISTATUS="error"
         APISTATUSMSG="NO CONFIG.JSON IN DICT MVSENDGRID.BP"
         GOTO end.of.routine
      END

      CALL @WOBJ(CONFIGOBJ,"FROMSTRING","",CONFIG,"",RERR)

      BEGIN CASE
         CASE API="MAILSEND_V2"
            GOSUB mailsendv2
         CASE 1
            APISTATUS="error"
            APISTATUSMSG="Invalid api request (":API:")"
      END CASE

end.of.routine: *

      CALL @WOBJ(OBJ,"SET","result.status",APISTATUS,"",RERR)
      CALL @WOBJ(OBJ,"SET","result.statusmsg",APISTATUSMSG,"",RERR)

      RETURN
      STOP

mailsendv2.init: * Initialize a email v2 object

      OBJ=""
      CALL @WOBJ(OBJ,"FROMSTRING","","{}","",RERR)
      CALL @WOBJ(OBJ,"SET","api","mailsend_v2","",RERR)
      CALL @WOBJ(OBJ,"SET.OBJECT","params","{}","",RERR)
      CALL @WOBJ(OBJ,"SET.ARRAY","params.to",'[{"email":"","name"}]',"",RERR)
      CALL @WOBJ(OBJ,"SET.ARRAY","params.cc",'[]',"",RERR)
      CALL @WOBJ(OBJ,"SET.ARRAY","params.bcc",'[]',"",RERR)
      CALL @WOBJ(OBJ,"SET.ARRAY","params.files",'[]',"",RERR)

      RETURN


mailsendv2: * Send an email

      * V2 USES USER NAME AND PASSWORD
      CALL @WOBJ(CONFIGOBJ,"GET","username",SENDGRID.USERNAME,"",RERR)
      CALL @WOBJ(CONFIGOBJ,"GET","password",SENDGRID.PASSWORD,"",RERR)

      IF SENDGRID.USERNAME="" THEN
         APISTATUS="error"
         APISTATUSMSG="No username defined in CONFIG.JSON"
         RETURN
      END
      IF SENDGRID.PASSWORD="" THEN
         APISTATUS="error"
         AISTATUSMSG="No password defined in CONFIG.JSON"
         RETURN
      END

      CALL @WOBJ(OBJ,"LENGTH","params.to",NUMBER.TOO,"",RERR)
      IF NOT(NUMBER.TOO) THEN
         APISTATUS="error"
         APISTATUS="Must supply array of to"
         RETURN
      END

      TOO.LABEL="to"; TOO.NAMES.LABEL="toname"
      IF NUMBER.TOO > 1 THEN TOO.LABEL:='[]'; TOO.NAMES.LABEL:='[]'

      TOO=''; TOO.NAMES=''

      CALL @WOBJ(COBJ,"FROMSTRING","","{}","",RERR)
      CALL @WOBJ(COBJ,"SET","method","POST","",RERR)
      CALL @WOBJ(COBJ,"SET","url","https://api.sendgrid.com/api/mail.send.json","",RERR)
      CALL @WOBJ(COBJ,"SET","insecure","Y","",RERR)


      CALL @WOBJ(COBJ,"SET.OBJECT","headers","{}","",RERR)


      CALL @WOBJ(COBJ,"SET.ARRAY","formfields","[]","",RERR)

      FIELD.NAME="api_user"; FIELD.VALUE=SENDGRID.USERNAME; GOSUB set.field
      FIELD.NAME="api_key"; FIELD.VALUE=SENDGRID.PASSWORD; GOSUB set.field

      FOR X=1 TO NUMBER.TOO
         P="params.to[":X-1:"]"
         CALL @WOBJ(OBJ,"GET",P:".email",THIS.TO,"",RERR)
         CALL @WOBJ(OBJ,"GET",P:".name",THIS.NAME,"",RERR)
         IF INDEX(THIS.TO,'@',1) THEN
            TOO<-1>=THIS.TO
            TOO.NAMES<-1>=THIS.NAME
         END
      NEXT X

      CONVERT CHAR(254) TO '&' IN TOO
      CONVERT CHAR(254) TO '&' IN TOO.NAMES

      CALL @WOBJ(SOBJ,"FROMSTRING","","{}","",RERR)
      CALL @WOBJ(SOBJ,"SET","name",TOO.LABEL,"",RERR)
      CALL @WOBJ(SOBJ,"SET","value",TOO,"",RERR)
      CALL @WOBJ(SOBJ,"TOSTRING","",SJSON,"",RERR)
      CALL @WOBJ(COBJ,"SET.OBJECT","formfields[-1]",SJSON,"",RERR)

      FIELD.NAME=TOO.NAMES.LABEL; FIELD.VALUE=TOO.NAMES; GOSUB set.field

      * DO CC
      
      CALL @WOBJ(OBJ,"LENGTH","params.cc",NUMBER.CC,"",RERR)
      IF NUMBER.CC THEN
      
         CC=''; CC.NAMES=''
         FOR X=1 TO NUMBER.CC
            P="params.cc[":X-1:"]"
            CALL @WOBJ(OBJ,"GET",P:".email",THIS.CC,"",RERR)
            CALL @WOBJ(OBJ,"GET",P:".name",THIS.NAME,"",RERR)
            IF INDEX(THIS.CC,'@',1) THEN
               CC<-1>=THIS.CC
               CC.NAMES<-1>=THIS.NAME
            END
            
         NEXT X
   
         CONVERT CHAR(254) TO '&' IN CC
         CONVERT CHAR(254) TO '&' IN CC.NAMES
 
         CC.LABEL="cc"; CC.NAMES.LABEL="ccname"
         IF NUMBER.CC > 1 THEN CC.LABEL:='[]'; CC.NAMES.LABEL:='[]'
         FIELD.NAME=CC.LABEL; FIELD.VALUE=CC; GOSUB set.field
         FIELD.NAME=CC.NAMES.LABEL; VALUE=CC.NAMES; GOSUB set.field
 
      END

      * DO BCC
      
      CALL @WOBJ(OBJ,"LENGTH","params.bcc",NUMBER.BCC,"",RERR)
      IF NUMBER.BCC THEN
      
         BCC=''; BCC.NAMES=''
         FOR X=1 TO NUMBER.BCC
            P="params.bcc[":X-1:"]"
            CALL @WOBJ(OBJ,"GET",P:".email",THIS.BCC,"",RERR)
            CALL @WOBJ(OBJ,"GET",P:".name",THIS.NAME,"",RERR)
            IF INDEX(THIS.BCC,'@',1) THEN
               BCC<-1>=THIS.BCC
               BCC.NAMES<-1>=THIS.NAME
            END
            
         NEXT X
   
         CONVERT CHAR(254) TO '&' IN BCC
         CONVERT CHAR(254) TO '&' IN BCC.NAMES
 
         BCC.LABEL="bcc"; BCC.NAMES.LABEL="bccname"
         IF NUMBER.BCC > 1 THEN BCC.LABEL:='[]'; BCC.NAMES.LABEL:='[]'
         FIELD.NAME=BCC.LABEL; FIELD.VALUE=BCC; GOSUB set.field
         FIELD.NAME=BCC.NAMES.LABEL; VALUE=BCC.NAMES; GOSUB set.field
 
      END
  
  
      CALL @WOBJ(OBJ,"GET","params.from",FROMEMAIL,"",RERR)
      IF FROMEMAIL="" THEN
         APISTATUS="error"
         APISTATUSMSG="Must supply from"
         RETURN
      END
      FIELD.NAME="from"; FIELD.VALUE=FROMEMAIL; GOSUB set.field

      ** GET BODY **

      CALL @WOBJ(OBJ,"GET","params.text",TEXT.BODY,"",RERR)
      CALL @WOBJ(OBJ,"GET","params.html",HTML.BODY,"",RERR)
      IF HTML.BODY="" AND TEXT.BODY="" THEN
         APISTATUS="error"
         APISTATUSMSG="Must supply either a text or html message"
         RETURN
      END

      * If our text.body has new lines in it we MUST write it out
      * to a file and then pass it as a file handle!!!
      *
 
      *IF INDEX(TEXT.BODY,CHAR(13),1) OR INDEX(TEXT.BODY,CHAR(10),1) THEN
      IF 0 THEN
         CALL MVDBTOOLKIT.WOBJ(FOBJ,"FROMSTRING","","{}","",RERR)
         CALL MVDBTOOLKIT.WOBJ(FOBJ,"SET","action","WRITE","",RERR)
         TMP.DIR="/tmp"; * This needs to be fixed to be dynamic
         TEXT.FILE.NAME=TMP.DIR:'/':@USER.NO:"_body.txt"
         CALL MVDBTOOLKIT.WOBJ(FOBJ,"SET","path",TEXT.FILE.NAME,"",RERR)
         CALL MVDBTOOLKIT.WOBJ(FOBJ,"SET","data",TEXT.BODY,"",RERR)
         CALL MVDBTOOLKIT.WFILEIO(FOBJ)
         FIELD.NAME="text"; FIELD.VALUE="@":TEXT.FILE.NAME; FIELD.TYPE="file"; GOSUB set.field
      END ELSE
         FIELD.NAME="text"; FIELD.VALUE=TEXT.BODY; GOSUB set.field
      END
      
      * NEED TO ADD THE HTML
      
      IF HTML.BODY = "" AND TEXT.BODY # "" THEN
         * WE NEED TO BUILD OUT A SIMPLE HTML VERSION, BASICALLY DOING NEW LINES
         HAS.CR=DCOUNT(TEXT.BODY,CHAR(13))
         HAS.LF=DCOUNT(TEXT.BODY,CHAR(10))
         HTML.BODY=TEXT.BODY
         BEGIN CASE
            CASE HAS.CR AND HAS.LF
               CONVERT CHAR(10) TO '' IN HTML.BODY
               CONVERT CHAR(13) TO @AM IN HTML.BODY
            CASE HAS.LF
               CONVERT CHAR(10) TO @AM IN HTML.BODY
            CASE HAS.CR
               CONVERT CHAR(13) TO @AM IN HTML.BODY
         END CASE
         NUM.LINES=DCOUNT(HTML.BODY,@AM)
         NEW.HTML.BODY=""
         FOR A=1 TO NUM.LINES
            LINE=HTML.BODY<A>
            IF A > 1 THEN NEW.HTML.BODY:='<BR>'
            NEW.HTML.BODY:=LINE
        NEXT A
        HTML.BODY=NEW.HTML.BODY
      END
      
      IF HTML.BODY # "" THEN
         *HTML.BODY="HTML VERSION<BR>":HTML.BODY
         FIELD.NAME="html"; FIELD.VALUE=HTML.BODY; GOSUB set.field
      END
      
      ** SUBJECT **

      CALL @WOBJ(OBJ,"GET","params.subject",SUBJECT,"",RERR)
      IF SUBJECT="" THEN
         APISTATUS="error"
         APISTATUSMSG="Must supply subject"
         RETURN
      END
      FIELD.NAME="subject"; FIELD.VALUE=SUBJECT; GOSUB set.field


      ** file uploads **

      CALL @WOBJ(OBJ,"LENGTH","params.files",NUM.FILES,"",RERR)

      IF NUM.FILES THEN
         FOR X=1 TO NUM.FILES
            P="params.files[":X-1:"]"
            CALL @WOBJ(OBJ,"GET",P:'.sourcefile',SOURCEFILE,"",RERR)
            CALL @WOBJ(OBJ,"GET",P:'.filename',FILENAME,"",RERR)
            CALL @WOBJ(OBJ,"GET",P:'.type',FILETYPE,"",RERR)
            FIELD.NAME='files[':FILENAME:']'
            FIELD.VALUE='@':SOURCEFILE
            IF FILETYPE # "" THEN FIELD.VALUE:=";type=":FILETYPE
            FIELD.TYPE='file'
            GOSUB set.field
         NEXT X
      END


      CALL @WOBJ(COBJ,"TOSTRING","",CJSON,"PRETTIFY",RERR)

      CALL @WOBJ(COBJ,"SET","debug","Y","",RERR); * SET TO DO DEBUGGING
      CALL MVDBTOOLKIT.WCALL(COBJ)

      CALL @WOBJ(COBJ,"TOSTRING","",TJSON,"PRETTIFY",RERR)

      CALL @WOBJ(COBJ,"GET","response.data",RESPONSE,"",RERR)

      CALL @WOBJ(ROBJ,"FROMSTRING","",RESPONSE,"",RERR)
      CALL @WOBJ(ROBJ,"GET","message",APISTATUSMSG,"",RERR)
      RETURN


set.field: *

      CALL @WOBJ(SOBJ,"FROMSTRING","","{}","",RERR)
      CALL @WOBJ(SOBJ,"SET","name",FIELD.NAME,"",RERR)
      CALL @WOBJ(SOBJ,"SET","value",FIELD.VALUE,"",RERR)
      IF FIELD.TYPE # "" THEN
         CALL @WOBJ(SOBJ,"SET","fieldtype",FIELD.TYPE,"",RERR)
      END
      FIELD.TYPE=""
      CALL @WOBJ(SOBJ,"TOSTRING","",SJSON,"",RERR)
      CALL @WOBJ(COBJ,"SET.OBJECT","formfields[-1]",SJSON,"",RERR)

      RETURN
